# Сколько ядер процессора будет использоваться обработки запросов.
worker_processes  1;

# Конфигурация обработки соединений.
events {
  worker_connections  1024;
} 

# Настройка обработки HTTP запросов.
http {
  # Прячем информацию о версии сервера.
  server_tokens  off;
  
  # Перехватываем ошибки от проксируемых запросов.
  proxy_intercept_errors  on;

  # Допустимые типы данных.
  include       mime.types;
  # Формат логгирования.
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';


  # Убираем дополнительное копирование при передаче файлов статики 
  # или пользовательского контента и избавляемся от вызова методов
  # формата read+write.
  sendfile        on;
  # Определяем перед отправкой клиенту, что все TCP-пакеты полностью заполнены информацией.
  tcp_nodelay     on;
  # Сбрасываем флаг tcp_nopush для последнего пакета, чтобы отправить его сразу же.
  tcp_nopush      on;


  # Разрешаем загрузку в одном пакете множества данных.
  client_max_body_size  200m;


  # Включаем сжатие.
  gzip  on;
  # Задаём уровень сжатия.
  gzip_comp_level  3;
  # Минимальное значение в байтах, ниже которого уже не нужно применять сжатие.
  gzip_min_length  1000;
  # Какой контент нужно сжимать.
  gzip_types
        text/plain
        text/css
        application/json
        application/x-javascript
        text/xml
        text/javascript;

  # Отключаем перенаправления, так как сейчас они не нужны.
  proxy_redirect     off;
  # Устанавливаем заголовки в соответствии с переменными.
  proxy_set_header   Host             $host;
  proxy_set_header   X-Real-IP        $remote_addr;
  proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
  
  
  include conf.d/*.conf;
}